<?php

/**
 * Controller for handling all OPML related tasks (export and import)
 *
 * @package    application_controllers
 * @copyright  Copyright (c) Tobias Zeising (http://www.aditu.de)
 * @license    GPLv3 (http://www.gnu.org/licenses/gpl-3.0.html)
 */
class OpmlController extends Zend_Controller_Action {
    
    /**
     * Initialize controller (set language object, base etc.)
     *
     * @return void
     */
    public function init() {
        // no automatic view rendering
        Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer')->setNoRender(true);
    }

    
    /**
     * export given opml file
     *
     * @return void
     */
    public function exportAction() {
        $date = Zend_Date::now();
        $xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!-- Generated by rsslounge -->
<opml version=\"2.0\">
<head>
    <title>rsslounge OPML Feed</title>
    <dateModified>".$date->get(Zend_Date::RSS)."</dateModified>
</head>
<body>\n";
    
        $categoriesModel = new application_models_categories();
        $feedsModel = new application_models_feeds();
        
        $categoriesDb = $categoriesModel->fetchAll( 
                            $categoriesModel->select()->order('position ASC') 
                        );
        foreach($categoriesDb as $category) {
            $xml = $xml . "\t<outline text=\"".htmlentities($category->name)."\">\n";
            
            $feedRowset = $category->findDependentRowset('application_models_feeds', null, $feedsModel->select()->order('position ASC'));
            foreach($feedRowset as $feed) {
                $plugin = Zend_Controller_Action_HelperBroker::getStaticHelper('pluginloader')->getPlugin($feed->source);
                $xml = $xml . "\t\t<outline text=\"".htmlentities($feed->name)."\" type=\"rss\" xmlUrl=\"".htmlentities($plugin->opml($feed->url))."\" htmlUrl=\"".htmlentities($feed->htmlurl)."\" />\n";
            }
            
            $xml = $xml . "\t</outline>\n\n";                
        }
            
        $xml = $xml . "\n</body></opml>";

        // set headers for download the file
        $this->getResponse()->setHeader('Content-length', strlen($xml));
        $this->getResponse()->setHeader('Content-type', 'application/octet-stream');
        $this->getResponse()->setHeader('Content-Disposition', 'attachment; filename="feeds_opml.xml"');
        
        echo $xml;
    }
    
    
    /**
     * import given opml file
     *
     * @return void
     */
    public function importAction() {
    
        // parse given opml file
        $xml = @simplexml_load_string(file_get_contents($_FILES['userfile']['tmp_name']));
        if(!$xml) {
            echo Zend_Json::encode( array(
                'error' => Zend_Registry::get('language')->translate('opml file parse error')
            ) );
            return;
        }
        
        // load first instance
        $parsedFeeds = array(
            '-1' => array() // uncategorized
        );
        foreach ($xml->body->outline as $outline) {
            // category?
            if(!isset($outline['xmlUrl'])) {
                // read category title
                $categoryTitle = "";
                if(isset($outline['text']))
                    $categoryTitle = (string)$outline['text'];
                elseif(isset($outline['title']))
                    $categoryTitle = (string)$outline['title'];
                if(strlen($categoryTitle)==0)
                    continue;
                
                $parsedFeeds[$categoryTitle] = $this->importAllOutline($outline);
            }
                
            // feed?
            else
                $parsedFeeds['-1'][] = $this->readFeed($outline);
        }    
        
        // insert new categories, get existing category id
        foreach($parsedFeeds as $category => $feeds) {
            // insert or get existing category
            $category = $this->insertCategory($category);
            
            // insert feeds
            $this->insertFeeds($category, $feeds);
        }
        
        // reset timeout
        $settingsModel = new application_models_settings();
        $settingsModel->save( array( 
            'lastrefresh' => 0
        ) );
        
        echo Zend_Json::encode( array(
            'success' => true
        ) );
        
    }
    
    
    /**
     * check whether a category exists and returns the id
     * else insert new category
     *
     * @return int category id
     * @param string $category the category name
     */
    protected function insertCategory($category) {
        // no category handling for uncategorized
        if($category==-1)
            return -1;
    
        // search existing category
        $categoriesModel = new application_models_categories();
        $categories = $categoriesModel->fetchAll(
            $categoriesModel->select()
                            ->where($categoriesModel->getAdapter()->quoteInto('name=?',trim($category)))
        );
        
        // use existing category
        if($categories->count()>0)
            return $categories->current()->id;
            
        // insert new category
        else {
            return $categoriesModel->insert( array(
                'name'         => trim($category),
                'position'     => $categoriesModel->maxPosition()+1
            ));
        }
    }


    /**
     * insert given feeds
     * 
     * @return void
     * @param int $category id
     * @param array $feeds as array
     */
    protected function insertFeeds($category, $feeds) {
        $feedsModel = new application_models_feeds();
        
        // insert unkown feeds
        foreach($feeds as $feed) {
            // search existing feed
            $moreFeeds = $feedsModel->fetchAll(
                $feedsModel->select()
                           ->where($feedsModel->getAdapter()->quoteInto('url=?',trim($feed['link'])))
            );
            
            // if feed doesn't exists
            if($moreFeeds->count()==0) {
                $feedsModel->add( array(
                    'name'       => trim($feed['title']),
                    'url'        => trim($feed['link']),
                    'category'   => $category,
                    'priority'   => 1,
                    'source'     => 'plugins_rss_feed'
                ));
            }
        }
        
        // fix positions
        $categoriesModel = new application_models_categories();
        $categoriesModel->fixPositions(
            $categoriesModel->find($category)->current()
        );
    }

    
    /**
     * import all feeds of a given outline tag
     * in one flat array
     *
     * @return array with all feeds
     * @param string $outline the current outline simplexml element
     */
    protected function importAllOutline($outline) {
        $return = array();
        foreach($outline->children() as $child) {
            if(isset($child['xmlUrl']))
                $return[] = $this->readFeed($child);
            else
                $return = array_merge(
                            $return,
                            $this->importAllOutline($child)
                            );
        }
        return $return;
    }
    
    
    /**
     * parse a outline element as feed
     *
     * @return array with feed data
     * @param string $outline the current outline simplexml element
     */
    protected function readFeed($outline) {
        if(isset($outline['text']))
            $title = (string)$outline['text'];
        else
            $title = (string)$outline['title'];
            
        return array(
            'title' => $title,
            'link'  => (string)$outline['xmlUrl']
        );
    }
}